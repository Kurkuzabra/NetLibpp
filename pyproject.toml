
[build-system]
requires = ["setuptools<72.2", "wheel", "pybind11>=2.6.0", "cmake>=3.20"] 
build-backend = "setuptools.build_meta"


[project]
name = "sampleproject"
version = "0.0.1"
description = "A sample Python lib"
readme = "README.md"
requires-python = ">=3.11"
keywords = ["sample", "setuptools", "development"]


authors = [{ name = "Victor", email = "vactor.pavlov.vadimovich@gmail.com" }]
maintainers = [
  { name = "Victor", email = "vactor.pavlov.vadimovich@gmail.com" },
]
classifiers = [
  # How mature is this project? Common values are
  #   3 - Alpha
  #   4 - Beta
  #   5 - Production/Stable
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  # "Topic :: Software Development :: Build Tools",
  # "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  # "Programming Language :: Python :: 3.9",
  # "Programming Language :: Python :: 3.10",
  # "Programming Language :: Python :: 3.11",
  # "Programming Language :: Python :: 3.12",
  # "Programming Language :: Python :: 3.13",
  # "Programming Language :: Python :: 3 :: Only",
]

# This field lists other packages that your project depends on to run.
# Any package you put here will be installed by pip when your project is
# installed, so they must be valid existing projects.
#
# For an analysis of this field vs pip's requirements files see:
# https://packaging.python.org/discussions/install-requires-vs-requirements/
# dependencies = ["peppercorn"]

# List additional groups of dependencies here (e.g. development
# dependencies). Users will be able to install these using the "extras"
# syntax, for example:
#
#   $ pip install sampleproject[dev]
#
# Optional dependencies the project provides. These are commonly
# referred to as "extras". For a more extensive definition see:
# https://packaging.python.org/en/latest/specifications/dependency-specifiers/#extras
[project.optional-dependencies]
dev = ["check-manifest"]
test = ["coverage"]

# List URLs that are relevant to your project
#
# This field corresponds to the "Project-URL" and "Home-Page" metadata fields:
# https://packaging.python.org/specifications/core-metadata/#project-url-multiple-use
# https://packaging.python.org/specifications/core-metadata/#home-page-optional
#
# Examples listed include a pattern for specifying where the package tracks
# issues, where the source is hosted, where to say thanks to the package
# maintainers, and where to support the project financially. The key is
# what's used to render the link text on PyPI.
[project.urls]
"Homepage" = "https://github.com/Kurkuzabra/NetLibpp/blob/develop/include/graph_func.cpp"
"Bug Reports" = "https://github.com/Kurkuzabra/NetLibpp/blob/develop/include/graph_func.cpp"
"Funding" = "https://github.com/Kurkuzabra/NetLibpp/blob/develop/include/graph_func.cpp"
"Say Thanks!" = "https://github.com/Kurkuzabra/NetLibpp/blob/develop/include/graph_func.cpp"
"Source" = "https://github.com/Kurkuzabra/NetLibpp/blob/develop/include/graph_func.cpp"


[tool.cibuildwheel]

test-command = "echo 'installed'"

manylinux-x86_64-image = "quay.io/pypa/manylinux_2_34_x86_64:latest"
# manylinux-i686-image = "manylinux2014"
manylinux-aarch64-image = "quay.io/pypa/manylinux_2_34_aarch64:latest"
# manylinux-ppc64le-image = "manylinux2014"
# manylinux-s390x-image = "manylinux2014"
# manylinux-armv7l-image = "manylinux_2_31"
manylinux-pypy_x86_64-image = "quay.io/pypa/manylinux_2_34_x86_64:latest"
# manylinux-pypy_i686-image = "manylinux2014"
manylinux-pypy_aarch64-image = "quay.io/pypa/manylinux_2_34_aarch64:latest"

musllinux-x86_64-image = "musllinux_1_2"
musllinux-i686-image = "musllinux_1_2"
musllinux-aarch64-image = "musllinux_1_2"
musllinux-ppc64le-image = "musllinux_1_2"
musllinux-s390x-image = "musllinux_1_2"
musllinux-armv7l-image = "musllinux_1_2"

[tool.cibuildwheel.linux]
archs = ["x86_64", "aarch64"]

# Build for Windows (win32 and win_amd64)
# windows = { archs = ["win32", "win_amd64"] }

# Build for macOS (x86_64 and arm64)
# macos = { archs = ["x86_64", "arm64"] }